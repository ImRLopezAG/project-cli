#!/usr/bin/env node
import lt from"path";import{execa as Kt}from"execa";import pt from"fs-extra";import*as S from"@clack/prompts";import Ue from"chalk";import{Command as wt}from"commander";import J from"path";import{fileURLToPath as mt}from"url";var dt=mt(import.meta.url),ut=J.dirname(dt),j=J.join(ut,"../"),T=J.join(j,"template/extras"),u=e=>J.join(T,e),be=`  ___ __  __ ____  _     ___  ____  _____ ____
 |_ _|  \\/  |  _ \\| |   / _ \\|  _ \\| ____|__  /
  | || |\\/| | |_) | |  | | | | |_) |  _|   / /
  | || |  | |  _ <| |__| |_| |  __/| |___ / /_
 |___|_|  |_|_| \\_\\\\____\\___/|_|   |_____/____|
`,K="my-fast-app",ne="IMR-Project CLI",G={sqlite:"with-sqlite",postgres:"with-pg"};import f from"path";import w from"fs-extra";import Se from"path";import Pe from"fs-extra";import ft from"sort-package-json";var ve={"better-auth":"1.3.8","drizzle-kit":"0.31.4","drizzle-orm":"0.44.5",postgres:"3.4.7","@libsql/client":"0.15.14",tailwindcss:"4.1.13",postcss:"8.5.3","@tailwindcss/postcss":"4.0.15","@tailwindcss/vite":"4.0.6","@trpc/client":"11.5.0","@trpc/next":"11.5.0","@trpc/react-query":"11.5.0","@trpc/server":"11.5.0","@tanstack/react-query":"5.87.1",superjson:"2.2.1","server-only":"0.0.1","@trpc/tanstack-react-query":"11.5.0","@biomejs/biome":"2.2.2","@apollo/server":"5.0.0","@as-integrations/next":"4.0.0",graphql:"16.8.1","@graphql-tools/schema":"10.0.0"};var y=e=>{let{dependencies:t,devMode:n,projectDir:o}=e,s=Pe.readJSONSync(Se.join(o,"package.json"));t.forEach(i=>{let a=ve[i];n&&s.devDependencies?s.devDependencies[i]=a:s.dependencies&&(s.dependencies[i]=a)});let r=ft(s);Pe.writeJSONSync(Se.join(o,"package.json"),r,{spaces:2})};import gt from"path";import xe from"fs-extra";import ht from"sort-package-json";var F=e=>{let{scripts:t,projectDir:n}=e,o=gt.join(n,"package.json"),s=xe.readJSONSync(o);s.scripts={...s.scripts,...t};let r=ht(s);xe.writeJSONSync(o,r,{spaces:2})};var Ie=({projectDir:e,packages:t,databaseProvider:n,framework:o})=>{let s=t?.drizzle.inUse;y({projectDir:e,dependencies:["better-auth"],devMode:!1});let i=u(o),a="src/app/api/auth/[...all]/route.ts",c=f.join(i,a),m=f.join(e,a);w.copySync(c,m);let d="src/lib/$auth/index.ts",P=f.join(i,d),k=f.join(e,d),h="src/middleware.ts",x=f.join(i,h),R=f.join(e,h),L="src/hooks/use-auth.ts",D=f.join(i,L),C=f.join(e,L);if(w.copySync(P,k),w.copySync(x,R),w.copySync(D,C),s){let te=`src/server/auth/${G[n]}-index.ts`,oe=f.join(i,te),ye=f.join(e,"src/server/auth/index.ts");w.ensureDirSync(f.dirname(ye)),w.copySync(oe,ye)}F({projectDir:e,scripts:{"auth:gen":"@better-auth/cli generate --config ./src/server/auth/index.ts"}})},_e=({projectDir:e,packages:t,databaseProvider:n,framework:o})=>{let s=t?.drizzle.inUse;y({projectDir:e,dependencies:["better-auth"],devMode:!1});let i=u(o),a="src/app/api/auth/$.ts",c=f.join(i,a),m=f.join(e,a);w.copySync(c,m);let d="src/lib/$auth/index.ts",P=f.join(i,d),k=f.join(e,d),h="src/hooks/use-auth.ts",x=f.join(i,h),R=f.join(e,h);if(w.copySync(P,k),w.copySync(x,R),s){let L=`src/server/auth/${G[n]}-index.ts`,D=f.join(i,L),C=f.join(e,"src/server/auth/index.ts");w.ensureDirSync(f.dirname(C)),w.copySync(D,C)}};import $ from"path";import se from"fs-extra";var we=({projectDir:e,framework:t})=>{y({projectDir:e,dependencies:["tailwindcss","postcss","@tailwindcss/postcss"],devMode:!0});let n=u(t),o=$.join(T,"config/postcss.config.js"),s=$.join(e,"postcss.config.js"),r=$.join(n,"src/app/globals.css"),i=$.join(e,"src/app/globals.css");se.copySync(o,s),se.copySync(r,i)},ke=({projectDir:e,framework:t})=>{y({projectDir:e,dependencies:["tailwindcss","@tailwindcss/vite"],devMode:!0});let n=u(t),o=$.join(n,"src/app/index.css"),s=$.join(e,"src/app/index.css");se.copySync(o,s)};import I from"path";import Te from"fs-extra";var Ae=({projectDir:e,packages:t,framework:n})=>{y({projectDir:e,dependencies:["@tanstack/react-query","superjson","@trpc/server","@trpc/client","@trpc/react-query","@trpc/tanstack-react-query","server-only"],devMode:!1});let o=t?.["better-auth"].inUse,s={SERVER:{INIT:{DEST:"src/server/trpc/init.ts",WITH_AUTH:"src/server/trpc/with-auth-init.ts",NO_AUTH:"src/server/trpc/init.ts"},ROOT:{DEST:"src/server/trpc/root.ts",WITH_AUTH:"src/server/trpc/root.ts",NO_AUTH:"src/server/trpc/root.ts"},ROUTES:{DEST:"src/server/trpc/routes",WITH_AUTH:"src/server/trpc/routes",NO_AUTH:"src/server/trpc/routes"}},CLIENT:{SRC:"src/lib/trpc",DEST:"src/lib/trpc"},API_HANDLER:{DEST:"src/app/api/[trpc]/route.ts",SRC:"src/app/api/[trpc]/route.ts"}},r=u(n),i=[];i.push([I.join(r,s.CLIENT.SRC),I.join(e,s.CLIENT.DEST)]),i.push([I.join(r,s.API_HANDLER.SRC),I.join(e,s.API_HANDLER.DEST)]),Object.values(s.SERVER).forEach(({DEST:a,NO_AUTH:c,WITH_AUTH:m})=>{i.push([I.join(r,o?m:c),I.join(e,a)])}),i.forEach(([a,c])=>{Te.copySync(a,c)})},Ce=({projectDir:e,packages:t,framework:n})=>{y({projectDir:e,dependencies:["@tanstack/react-query","superjson","@trpc/server","@trpc/client","@trpc/react-query","@trpc/tanstack-react-query"],devMode:!1});let o=t?.["better-auth"].inUse,s={SERVER:{INIT:{DEST:"src/server/trpc/init.ts",WITH_AUTH:"src/server/trpc/with-auth-init.ts",NO_AUTH:"src/server/trpc/init.ts"},ROOT:{DEST:"src/server/trpc/root.ts",WITH_AUTH:"src/server/trpc/root.ts",NO_AUTH:"src/server/trpc/root.ts"},ROUTES:{DEST:"src/server/trpc/routes",WITH_AUTH:"src/server/trpc/routes",NO_AUTH:"src/server/trpc/routes"}},CLIENT:{SRC:"src/lib/trpc",DEST:"src/lib/trpc"},API_HANDLER:{DEST:"src/app/api/trpc/$.ts",SRC:"src/app/api/trpc/$.ts"}},r=u(n),i=[];i.push([I.join(r,s.CLIENT.SRC),I.join(e,s.CLIENT.DEST)]),i.push([I.join(r,s.API_HANDLER.SRC),I.join(e,s.API_HANDLER.DEST)]),Object.values(s.SERVER).forEach(({DEST:a,NO_AUTH:c,WITH_AUTH:m})=>{i.push([I.join(r,o?m:c),I.join(e,a)])}),i.forEach(([a,c])=>{Te.copySync(a,c)})};import je from"path";import yt from"fs-extra";var re=({projectDir:e})=>{y({projectDir:e,dependencies:["@biomejs/biome"],devMode:!0});let t=je.join(T,"config/biome.jsonc"),n=je.join(e,"biome.json");yt.copySync(t,n),F({projectDir:e,scripts:{lint:"biome check --write --unsafe .","check:unsafe":"biome check --write --unsafe .","check:write":"biome check --write .",check:"biome check ."}})};import ie from"fs";import Re from"path";import Ee from"path";var Y=e=>(e.length>1&&e.endsWith("/")&&(e=e.slice(0,-1)),e);var Q=e=>{let n=Y(e).split("/"),o=n[n.length-1];if(o==="."){let i=Ee.resolve(process.cwd());o=Ee.basename(i)}let s=n.findIndex(i=>i.startsWith("@"));n.findIndex(i=>i.startsWith("@"))!==-1&&(o=n.slice(s).join("/"));let r=n.filter(i=>!i.startsWith("@")).join("/");return[o,r]};var bt=e=>e.replace(/[^a-zA-Z0-9_.-]/g,"_").toLowerCase(),ae=({projectDir:e,databaseProvider:t,projectName:n})=>{let o=Re.join(T,`start-database/${t}.sh`),s=ie.readFileSync(o,"utf-8"),r=Re.join(e,"start-database.sh"),[i]=n==="."?Q(e):[n],a=bt(i);ie.writeFileSync(r,s.replaceAll("project1",a)),ie.chmodSync(r,"755")};import v from"path";import E from"fs-extra";var N={INDEX:"src/server/db/entities/index.ts",SCHEMA:"src/server/db/entities/schemas.entity.ts",AUTH:"src/server/db/entities/auth.entity.ts",CLIENT:"src/server/db/index.ts",CONFIG:"drizzle.config.ts",ENTITIES_DIR:"src/server/db/entities"},ce=({projectDir:e,packages:t,scopedAppName:n,databaseProvider:o,framework:s})=>{y({projectDir:e,dependencies:["drizzle-kit"],devMode:!0}),y({projectDir:e,dependencies:["drizzle-orm",{postgres:"postgres",sqlite:"@libsql/client"}[o]],devMode:!1});let r=u(s),i=v.join(T,`config/drizzle-config-${o}.ts`),a=v.join(e,N.CONFIG),c=v.join(r,N.ENTITIES_DIR);if(t?.["better-auth"])switch(o){case"postgres":{let D=v.join(c,"with-pg-schema.ts"),C=v.join(e,N.SCHEMA),te=v.join(c,"with-pg-auth.ts"),oe=v.join(e,N.AUTH);E.copySync(D,C),E.copySync(te,oe);break}case"sqlite":{let D=v.join(c,"with-sqlite-auth.ts"),C=v.join(e,N.AUTH);E.copySync(D,C);break}}let m=v.join(c,"index.ts"),d=v.join(e,N.INDEX),P=`src/server/db/${G[o]}-index.ts`,k=v.join(r,P),h=v.join(e,N.CLIENT);F({projectDir:e,scripts:{"db:push":"drizzle-kit push","db:studio":"drizzle-kit studio","db:generate":"drizzle-kit generate","db:migrate":"drizzle-kit migrate"}}),E.copySync(i,a),E.mkdirSync(v.dirname(d),{recursive:!0}),E.copySync(m,d),E.copySync(k,h);let x=v.join(e,"src/lib/env.ts"),R=n.replace(/-/g,"_"),L=o==="sqlite"?St:vt(R);E.appendFileSync(x,L)},vt=e=>`
import { z } from 'zod'

export const env = z
	.object({
		NODE_ENV: z
			.enum(['development', 'production', 'test'])
			.default('development'),
		DATABASE_URL: z.string().default('postgres://postgres:postgres@localhost:5432/${e}'),
		AUTH_SECRET: z.string().default('SUPER_SECRET_KEY'),
	})
	.parse(process.env)
`,St=`
import { z } from 'zod'

export const env = z
	.object({
		NODE_ENV: z
			.enum(['development', 'production', 'test'])
			.default('development'),
		DATABASE_URL: z.string().default('file:./src/server/db/dev.db'),
		DB_AUTH_TOKEN: z.string().optional(),
		AUTH_SECRET: z.string().default('SUPER_SECRET_KEY'),
	})
	.parse(process.env)
`;import De from"path";import Pt from"fs-extra";var le=({projectDir:e,framework:t})=>{y({projectDir:e,dependencies:["@apollo/server","@as-integrations/next","graphql","@graphql-tools/schema"],devMode:!1});let o=u(t),s="src/app/api/graphql/route.ts",r=De.join(o,s),i=De.join(e,s);Pt.copySync(r,i)};var X=["postgres","sqlite"],Ne=(e,t)=>({"better-auth":{inUse:e.includes("better-auth"),installer:Ie},drizzle:{inUse:e.includes("drizzle"),installer:ce},tailwind:{inUse:e.includes("tailwind"),installer:we},trpc:{inUse:e.includes("trpc"),installer:Ae},dbContainer:{inUse:["postgres"].includes(t),installer:ae},biome:{inUse:e.includes("biome"),installer:re},graphql:{inUse:e.includes("graphql"),installer:le}}),Oe=(e,t)=>({"better-auth":{inUse:e.includes("better-auth"),installer:_e},drizzle:{inUse:e.includes("drizzle"),installer:ce},tailwind:{inUse:e.includes("tailwind"),installer:ke},trpc:{inUse:e.includes("trpc"),installer:Ce},dbContainer:{inUse:["postgres"].includes(t),installer:ae},biome:{inUse:e.includes("biome"),installer:re},graphql:{inUse:e.includes("graphql"),installer:le}});import xt from"path";import It from"fs-extra";var H=()=>{let e=xt.join(j,"package.json");return It.readJSONSync(e).version??"1.0.0"};var _=()=>{let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":e.startsWith("bun")?"bun":"npm":"npm"};var q=class extends Error{constructor(t){super(t)}};import Z from"chalk";var l={error(...e){console.log(Z.red(...e))},warn(...e){console.log(Z.yellow(...e))},info(...e){console.log(Z.cyan(...e))},success(...e){console.log(Z.green(...e))}};var _t=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,ze=e=>{let t=Y(e),n=t.split("/"),o=n.findIndex(r=>r.startsWith("@")),s=n[n.length-1];if(n.findIndex(r=>r.startsWith("@"))!==-1&&(s=n.slice(o).join("/")),!(t==="."||_t.test(s??"")))return"App name must consist of only lowercase alphanumeric characters, '-', and '_'"};var Me=e=>{if(e.startsWith(".")||e.startsWith("/"))return"Import alias can't start with '.' or '/'"};var O={appName:K,packages:["better-auth","drizzle","tailwind","trpc","biome"],framework:"next",flags:{noGit:!1,noInstall:!1,default:!1,CI:!1,tailwind:!0,trpc:!0,drizzle:!0,betterAuth:!0,importAlias:"@/",appRouter:!0,dbProvider:"postgres",biome:!0,graphql:!1},databaseProvider:"postgres"},Le=async()=>{let e=O,t=new wt().name(ne).description("A CLI for creating web applications with the fast vibe stack").argument("[dir]","The name of the application, as well as the name of the directory to create").option("--noGit","Explicitly tell the CLI to not initialize a new git repo in the project",!1).option("--noInstall","Explicitly tell the CLI to not run the package manager's install command",!1).option("-y, --default","Bypass the CLI and use all default options to bootstrap a new t3-app",!1).option("--framework [framework]","Choose the framework to use. Possible values: next, tanstack-star","next").option("--trpc [boolean]","Experimental: Boolean value if we should install tRPC. Must be used in conjunction with `--CI`.",o=>!!o&&o!=="false").option("--graphql [boolean]","Experimental: Boolean value if we should install GraphQL. Must be used in conjunction with `--CI`.",o=>!!o&&o!=="false").option("-i, --import-alias","Explicitly tell the CLI to use a custom import alias",O.flags.importAlias).option("--dbProvider [provider]",`Choose a database provider to use. Possible values: ${X.join(", ")}`,O.flags.dbProvider).option("--appRouter [boolean]","Explicitly tell the CLI to use the new Next app router",o=>!!o&&o!=="false").version(H(),"-v, --version","Display the version number").addHelpText("afterAll",`
Run ${Ue.bold.green("npx create-imr-app@latest")} to use the latest version without installing.
Visit ${Ue.underline.blue("https://imrlopez.dev/")} for more information.
      `).parse(process.argv);process.env.npm_config_user_agent?.startsWith("yarn/3")&&l.warn(`  WARNING: It looks like you are using Yarn 3. This is currently not supported,
  and likely to result in a crash. Please run create-imr-app with another
  package manager such as pnpm, npm, or Yarn Classic.
  See: https://github.com/t3-oss/create-imr-app/issues/57`);let n=t.args[0];if(n&&(e.appName=n),e.flags=t.opts(),e.flags.CI)return e.packages=[],e.flags.trpc&&e.packages.push("trpc"),e.flags.tailwind&&e.packages.push("tailwind"),e.flags.drizzle&&e.packages.push("drizzle"),e.flags.betterAuth&&e.packages.push("better-auth"),e.flags.biome&&e.packages.push("biome"),e.flags.graphql&&e.packages.push("graphql"),X.includes(e.flags.dbProvider)===!1&&(l.warn(`Incompatible database provided. Use: ${X.join(", ")}. Exiting.`),process.exit(0)),e.databaseProvider=e.packages.includes("drizzle")?e.flags.dbProvider:"sqlite",e;if(e.flags.default)return e;try{if(process.env.TERM_PROGRAM?.toLowerCase().includes("mintty"))throw l.warn(`  WARNING: It looks like you are using MinTTY, which is non-interactive. This is most likely because you are
  using Git Bash. If that's that case, please use Git Bash from another terminal, such as Windows Terminal. Alternatively, you
  can provide the arguments from the CLI directly: https://create.t3.gg/en/installation#experimental-usage to skip the prompts.`),new q("Non-interactive environment");let o=_(),s=await S.group({...!n&&{name:()=>S.text({message:"What will your project be called?",defaultValue:n,validate:ze})},framework:()=>S.select({message:"What framework would you like to use?",options:[{value:"next",label:"Next.js"},{value:"tanstack-star",label:"TanStack Star"}],initialValue:"next"}),authentication:()=>S.select({message:"What authentication would you like to use?",options:[{value:"none",label:"No authentication"},{value:"better-auth",label:"Better Auth"}],initialValue:"better-auth"}),databaseProvider:()=>S.select({message:"What database provider would you like to use?",options:[{value:"postgres",label:"PostgreSQL"},{value:"sqlite",label:"SQLite"}],initialValue:"postgres"}),apiLayer:({results:i})=>S.select({message:"What API layer would you like to use?",options:[{value:"trpc",label:"tRPC (recommended)"},...i.framework==="next"?[{value:"graphql",label:"GraphQL"},{value:"both",label:"Both tRPC and GraphQL"}]:[]],initialValue:"trpc"}),...!e.flags.noGit&&{git:()=>S.confirm({message:"Should we initialize a Git repository and stage the changes?",initialValue:!O.flags.noGit})},...!e.flags.noInstall&&{install:()=>S.confirm({message:`Should we run '${o}`+(o==="yarn"?"'?":" install' for you?"),initialValue:!O.flags.noInstall})},importAlias:()=>S.text({message:"What import alias would you like to use?",defaultValue:O.flags.importAlias,placeholder:O.flags.importAlias,validate:Me})},{onCancel(){process.exit(1)}}),r=[];return r.push("tailwind","drizzle","biome"),s.authentication==="better-auth"&&r.push("better-auth"),s.apiLayer==="trpc"&&r.push("trpc"),s.apiLayer==="graphql"&&r.push("graphql"),s.apiLayer==="both"&&r.push("trpc","graphql"),{appName:s.name??e.appName,packages:r,framework:s.framework,databaseProvider:s.databaseProvider||"postgres",flags:{...e.flags,appRouter:!0,noGit:!s.git||e.flags.noGit,noInstall:!s.install||e.flags.noInstall,importAlias:s.importAlias??e.flags.importAlias}}}catch(o){if(o instanceof q)l.warn(`
  ${ne} needs an interactive terminal to provide options`),await S.confirm({message:"Continue scaffolding a default T3 app?",initialValue:!0})||(l.info("Exiting..."),process.exit(0)),l.info(`Bootstrapping a default T3 app in ./${e.appName}`);else throw o}return e};import jt from"fs";import pe from"path";import Fe from"chalk";import kt from"ora";var $e=e=>{let{packages:t}=e;l.info("Adding boilerplate...");for(let[n,o]of Object.entries(t))if(o.inUse){let s=kt(`Boilerplating ${n}...`).start();o.installer(e),s.succeed(Fe.green(`Successfully setup boilerplate for ${Fe.green.bold(n)}`))}l.info("")};import g from"path";import A from"fs-extra";var He=({projectDir:e,framework:t})=>{let n=g.join(u(t),"src/app/"),o=g.join(n,"layout.tsx"),s=g.join(e,"src/app/layout.tsx");A.copySync(o,s)},Ge=({projectDir:e,packages:t,framework:n})=>{let o=g.join(u(n),"src/app"),s=g.join(o,"page.tsx"),r=g.join(e,"src/app/page.tsx");if(A.copySync(s,r),t?.["better-auth"].inUse){let i=g.join(o,"(unauth)"),a=g.join(e,"src/app/(unauth)");A.copySync(i,a)}},qe=({projectDir:e,packages:t,framework:n})=>{let o=g.join(u(n),"src/components/"),s=g.join(o,"ui"),r=g.join(e,"src/components/ui");A.copySync(s,r);let i=g.join(o,"providers"),a=g.join(e,"src/components/providers");A.ensureDirSync(a);let c=Tt({auth:t?.["better-auth"]?.inUse??!1,trpc:t?.trpc?.inUse??!1});if(A.writeFileSync(g.join(a,"index.tsx"),c),A.copySync(g.join(i,"theme.tsx"),g.join(a,"theme.tsx")),t?.["better-auth"].inUse){A.copySync(g.join(i,"auth.tsx"),g.join(a,"auth.tsx"));let m=g.join(o,"auth"),d=g.join(e,"src/components/auth");A.copySync(m,d)}};function Tt(e){let t=['import { Toaster } from "~ui/sonner";','import type { PropsWithChildren } from "react";','import { ThemeProvider } from "./theme";'],n=[{open:'<ThemeProvider attribute="class" defaultTheme="system" enableSystem>',close:"</ThemeProvider>"}];e.trpc&&(t.push("import { TRPCReactProvider } from '~lib/trpc/react';"),n.unshift({open:"<TRPCReactProvider>",close:"</TRPCReactProvider>"})),e.auth&&(t.push('import { AuthProvider } from "./auth";'),n.splice(e.trpc?1:0,0,{open:"<AuthProvider>",close:"</AuthProvider>"}));let o=n.map(r=>r.open).join(`
			`),s=n.map(r=>r.close).reverse().join(`
			`);return`${t.join(`
`)}

export function Providers({ children }: PropsWithChildren) {
	return (
		${o}
			{children}
			<Toaster richColors position="top-center" />
		${s}
	);
}`}import ee from"path";import*as M from"@clack/prompts";import z from"chalk";import V from"fs-extra";import At from"ora";var Ve=async({projectName:e,projectDir:t,pkgManager:n,noInstall:o,framework:s})=>{let i={next:ee.join(j,"template/base/nextjs"),"tanstack-star":ee.join(j,"template/base/tts")}[s];if(!i)throw new Error(`Unsupported framework: ${s}`);o?l.info(""):l.info(`
Using: ${z.cyan.bold(n)}
`);let a=At(`Scaffolding in: ${t}...
`).start();if(V.existsSync(t))if(V.readdirSync(t).length===0)e!=="."&&a.info(`${z.cyan.bold(e)} exists but is empty, continuing...
`);else{a.stopAndPersist();let m=await M.select({message:`${z.redBright.bold("Warning:")} ${z.cyan.bold(e)} already exists and isn't empty. How would you like to proceed?`,options:[{label:"Abort installation (recommended)",value:"abort"},{label:"Clear the directory and continue installation",value:"clear"},{label:"Continue installation and overwrite conflicting files",value:"overwrite"}],initialValue:"abort"});(M.isCancel(m)||m==="abort")&&(a.fail("Aborting installation..."),process.exit(1));let d=await M.confirm({message:`Are you sure you want to ${m==="clear"?"clear the directory":"overwrite conflicting files"}?`,initialValue:!1});(M.isCancel(d)||!d)&&(a.fail("Aborting installation..."),process.exit(1)),m==="clear"&&(a.info(`Emptying ${z.cyan.bold(e)} and creating t3 app..
`),V.emptyDirSync(t))}a.start(),V.copySync(i,t),V.renameSync(ee.join(t,"_gitignore"),ee.join(t,".gitignore"));let c=e==="."?"App":z.cyan.bold(e);a.succeed(`${c} ${z.green("scaffolded successfully!")}
`)};import p from"path";import b from"fs-extra";var We=({projectDir:e,framework:t,packages:n})=>{let o=p.join(u(t),"src"),s=p.join(o,"app"),r=p.join(o,"routeTree.gen.ts"),i=p.join(e,"src/routeTree.gen.ts");if(b.copySync(r,i),n?.["better-auth"].inUse){let a=p.join(o,"with-auth-router.tsx"),c=p.join(e,"src/router.tsx");b.copySync(a,c);let m=p.join(s,"with-auth-root.tsx"),d=p.join(e,"src/app/__root.tsx");b.copySync(m,d)}else{let a=p.join(o,"router.tsx"),c=p.join(e,"src/router.tsx");b.copySync(a,c);let m=p.join(s,"root.tsx"),d=p.join(e,"src/app/__root.tsx");b.copySync(m,d)}},Be=({projectDir:e,packages:t,framework:n})=>{let o=p.join(u(n),"src/app");if(t?.["better-auth"].inUse){let s=p.join(o,"_auth"),r=p.join(e,"src/app/_auth");b.copySync(s,r);let i=p.join(o,"_unauth"),a=p.join(e,"src/app/_unauth");b.copySync(i,a)}else{let s=p.join(o,"_auth/index.tsx"),r=p.join(e,"src/app/index.tsx");b.copySync(s,r)}},Je=({projectDir:e,packages:t,framework:n})=>{let o=p.join(u(n),"src/components/"),s=p.join(o,"ui"),r=p.join(e,"src/components/ui");b.copySync(s,r);let i=p.join(u(n),"src/hooks"),a=p.join(e,"src/hooks");b.copySync(i,a);let c=p.join(o,"loader.tsx"),m=p.join(e,"src/components/loader.tsx");b.copySync(c,m);let d=p.join(o,"providers"),P=p.join(e,"src/components/providers");b.ensureDirSync(P);let k=Ct({auth:t?.["better-auth"]?.inUse??!1,trpc:t?.trpc?.inUse??!1});if(b.writeFileSync(p.join(P,"index.tsx"),k),b.copySync(p.join(d,"theme"),p.join(P,"theme")),t?.["better-auth"].inUse){b.copySync(p.join(d,"auth.tsx"),p.join(P,"auth.tsx"));let h=p.join(o,"auth"),x=p.join(e,"src/components/auth");b.copySync(h,x)}};function Ct(e){let t=['import { Toaster } from "~ui/sonner";','import type { PropsWithChildren } from "react";','import { ThemeProvider } from "./theme";'],n=[{open:'<ThemeProvider attribute="class" defaultTheme="system" enableSystem>',close:"</ThemeProvider>"}];e.auth&&(t.push('import { AuthProvider } from "./auth";'),n.splice(e.trpc?1:0,0,{open:"<AuthProvider>",close:"</AuthProvider>"}));let o=n.map(r=>r.open).join(`
			`),s=n.map(r=>r.close).reverse().join(`
			`);return`${t.join(`
`)}

export function Providers({ children }: PropsWithChildren) {
	return (
		${o}
			{children}
			<Toaster richColors position="top-center" />
		${s}
	);
}`}var Ke=async({projectName:e,scopedAppName:t,packages:n,noInstall:o,appRouter:s,framework:r,databaseProvider:i})=>{let a=_(),c=pe.resolve(process.cwd(),e);return await Ve({projectName:e,projectDir:c,pkgManager:a,scopedAppName:t,noInstall:o,appRouter:s,databaseProvider:i,framework:r}),$e({projectName:e,scopedAppName:t,projectDir:c,pkgManager:a,packages:n,noInstall:o,appRouter:s,databaseProvider:i,framework:r}),r==="next"&&(jt.copyFileSync(pe.join(j,"template/extras/config/next-config.ts"),pe.join(c,"next.config.ts")),He({projectDir:c,packages:n,framework:r}),Ge({projectDir:c,packages:n,framework:r}),qe({projectDir:c,packages:n,framework:r})),r==="tanstack-star"&&(We({projectDir:c,packages:n,framework:r}),Be({projectDir:c,packages:n,framework:r}),Je({projectDir:c,packages:n,framework:r})),c};import{execSync as ue}from"child_process";import me from"path";import*as de from"@clack/prompts";import W from"chalk";import{execa as B}from"execa";import Ye from"fs-extra";import Et from"ora";var Rt=e=>{try{return ue("git --version",{cwd:e}),!0}catch{return!1}},fe=e=>Ye.existsSync(me.join(e,".git")),ge=async e=>{try{return await B("git",["rev-parse","--is-inside-work-tree"],{cwd:e,stdout:"ignore"}),!0}catch{return!1}},Dt=()=>{let t=ue("git --version").toString().trim().split(" ")[2],n=t?.split(".")[0],o=t?.split(".")[1];return{major:Number(n),minor:Number(o)}},Nt=()=>ue("git config --global init.defaultBranch || echo main").toString().trim(),Qe=async e=>{if(l.info("Initializing Git..."),!Rt(e)){l.warn("Git is not installed. Skipping Git initialization.");return}let t=Et(`Creating a new git repo...
`).start(),n=fe(e),o=await ge(e),s=me.parse(e).name;if(o&&n){if(t.stop(),!await de.confirm({message:`${W.redBright.bold("Warning:")} Git is already initialized in "${s}". Initializing a new git repository would delete the previous history. Would you like to continue anyways?`,initialValue:!1})){t.info("Skipping Git initialization.");return}Ye.removeSync(me.join(e,".git"))}else if(o&&!n&&(t.stop(),!await de.confirm({message:`${W.redBright.bold("Warning:")} "${s}" is already in a git worktree. Would you still like to initialize a new git repository in this directory?`,initialValue:!1}))){t.info("Skipping Git initialization.");return}try{let r=Nt(),{major:i,minor:a}=Dt();i<2||i===2&&a<28?(await B("git",["init"],{cwd:e}),await B("git",["symbolic-ref","HEAD",`refs/heads/${r}`],{cwd:e})):await B("git",["init",`--initial-branch=${r}`],{cwd:e}),await B("git",["add","."],{cwd:e}),t.succeed(`${W.green("Successfully initialized and staged")} ${W.green.bold("git")}
`)}catch{t.fail(`${W.bold.red("Failed:")} could not initialize git. Update git to the latest version!
`)}};var Xe=async({projectName:e=K,packages:t,noInstall:n,projectDir:o,databaseProvider:s})=>{let r=_();l.info("Next steps:"),e!=="."&&l.info(`  cd ${e}`),n&&(r==="yarn"?l.info(`  ${r}`):l.info(`  ${r} install`)),["postgres","mysql"].includes(s)&&l.info("  Start up a database, if needed using './start-database.sh'"),t?.["better-auth"].inUse&&l.info("  Fill in your .env with necessary values. See https://imrlopez.dev/en/usage/first-steps for more info."),["npm","bun"].includes(r)?l.info(`  ${r} run dev`):l.info(`  ${r} dev`),!await ge(o)&&!fe(o)&&l.info("  git init"),l.info('  git commit -m "initial commit"')};import U from"fs";import Ze from"path";import{applyEdits as Ot,modify as zt,parse as Mt}from"jsonc-parser";function et(e,t,n){U.readdirSync(e).forEach(s=>{let r=Ze.join(e,s);if(U.statSync(r).isDirectory())et(r,t,n);else{let a=U.readFileSync(r,"utf8").replace(new RegExp(t,"g"),n);U.writeFileSync(r,a,"utf8")}})}function Ut(e,t){let n=Ze.join(e,"tsconfig.json");if(U.existsSync(n))try{let o=U.readFileSync(n,"utf8"),s=Mt(o);if(s?.compilerOptions?.paths){let r={};Object.entries(s.compilerOptions.paths).forEach(([c,m])=>{if(c.startsWith("~/")){let d=c.replace("~",t.replace(/\*/g,"").replace(/\/$/,""));r[d]=m}else r[c]=m});let i=zt(o,["compilerOptions","paths"],r,{formattingOptions:{tabSize:1,insertSpaces:!1}}),a=Ot(o,i);U.writeFileSync(n,a,"utf8")}}catch(o){console.warn(`Warning: Could not update tsconfig.json paths: ${o}`)}}var tt=(e,t)=>{let n=t.replace(/\*/g,"").replace(/[^/]$/,"$&/");["~/","~lib/","~server/","~components/","~ui/","~hooks/"].forEach(s=>{let r=s.replace("~",n.slice(0,-1));et(e,s,r)}),Ut(e,n)};import Lt from"gradient-string";var Ft={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},ot=()=>{let e=Lt(Object.values(Ft)),t=_();(t==="yarn"||t==="pnpm")&&console.log(""),console.log(e.multiline(be))};import $t from"chalk";import{execa as Ht}from"execa";import Gt from"ora";var nt=async({pkgManager:e,projectDir:t,biome:n})=>{l.info(`Formatting project with ${n?"prettier":"biome"}...`);let o=Gt(`Running format command
`).start();n&&await Ht(e,["run","lint"],{cwd:t}),o.succeed(`${$t.green("Successfully formatted project")}`)};import qt from"chalk";import{execa as st}from"execa";import rt from"ora";var he=async(e,t,n)=>{let{onDataHandle:o,args:s=["install"],stdout:r="pipe"}=n,i=rt(`Running ${t} install...`).start(),a=st(t,s,{cwd:e,stdout:r});return await new Promise((c,m)=>{o&&a.stdout?.on("data",o(i)),a.on("error",d=>m(d)),a.on("close",()=>c())}),i},Vt=async(e,t)=>{switch(e){case"npm":return await st(e,["install"],{cwd:t,stderr:"inherit"}),null;case"pnpm":return he(t,e,{onDataHandle:n=>o=>{let s=o.toString();s.includes("Progress")&&(n.text=s.includes("|")?s.split(" | ")[1]??"":s)}});case"yarn":return he(t,e,{onDataHandle:n=>o=>{n.text=o.toString()}});case"bun":return he(t,e,{stdout:"ignore"})}},it=async({projectDir:e})=>{l.info("Installing dependencies...");let t=_();(await Vt(t,e)??rt()).succeed(qt.green(`Successfully installed dependencies!
`))};import{execSync as Wt}from"child_process";import Bt from"https";var at=e=>{let t=H();t.includes("beta")?(l.warn("  You are using a beta version of create-imr-app."),l.warn("  Please report any bugs you encounter.")):t.includes("next")?(l.warn("  You are running create-imr-app with the @next tag which is no longer maintained."),l.warn("  Please run the CLI with @latest instead.")):t!==e&&(l.warn("  You are using an outdated version of create-imr-app."),l.warn("  Your version:",`${t}.`,"Latest version in the npm registry:",e),l.warn("  Please run the CLI with @latest to get the latest updates.")),console.log("")};function Jt(){return new Promise((e,t)=>{Bt.get("https://registry.npmjs.org/-/package/create-imr-app/dist-tags",n=>{if(n.statusCode===200){let o="";n.on("data",s=>o+=s),n.on("end",()=>{e(JSON.parse(o).latest)})}else t()}).on("error",()=>{t()})})}var ct=()=>Jt().catch(()=>{try{return Wt("npm view create-imr-app version").toString().trim()}catch{return null}});var Yt=async()=>{let e=await ct(),t=_();ot(),e&&at(e);let{appName:n,packages:o,flags:{noGit:s,noInstall:r,importAlias:i,appRouter:a},databaseProvider:c,framework:m}=await Le(),d={next:Ne(o,c),"tanstack-star":Oe(o,c)}[m];d||(l.error(`Unsupported framework: ${m}`),process.exit(1));let[P,k]=Q(n),h=await Ke({projectName:k,scopedAppName:P,packages:d,databaseProvider:c,importAlias:i,framework:m,noInstall:r,appRouter:a}),x=pt.readJSONSync(lt.join(h,"package.json"));if(x.name=P,x.imrMetadata={initVersion:H()},t!=="bun"){let{stdout:R}=await Kt(t,["-v"],{cwd:h});x.packageManager=`${t}@${R.trim()}`}pt.writeJSONSync(lt.join(h,"package.json"),x,{spaces:2}),i!=="~/"&&tt(h,i),r||(await it({projectDir:h}),await nt({pkgManager:t,projectDir:h,biome:o.includes("biome")})),s||await Qe(h),await Xe({projectName:k,packages:d,appRouter:a,noInstall:r,projectDir:h,databaseProvider:c}),process.exit(0)};Yt().catch(e=>{l.error("Aborting installation..."),e instanceof Error?l.error(e):(l.error("An unknown error has occurred. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
