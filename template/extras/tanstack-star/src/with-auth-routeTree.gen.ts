/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './app/__root'
import { Route as UnauthRouteRouteImport } from './app/_unauth/route'
import { Route as AuthRouteRouteImport } from './app/_auth/route'
import { Route as AuthIndexRouteImport } from './app/_auth/index'
import { Route as UnauthSignUpRouteImport } from './app/_unauth/sign-up'
import { Route as UnauthSignInRouteImport } from './app/_unauth/sign-in'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './app/api/trpc/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './app/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UnauthRouteRoute = UnauthRouteRouteImport.update({
  id: '/_unauth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const UnauthSignUpRoute = UnauthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => UnauthRouteRoute,
} as any)
const UnauthSignInRoute = UnauthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => UnauthRouteRoute,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof UnauthSignInRoute
  '/sign-up': typeof UnauthSignUpRoute
  '/': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof UnauthSignInRoute
  '/sign-up': typeof UnauthSignUpRoute
  '/': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_unauth': typeof UnauthRouteRouteWithChildren
  '/_unauth/sign-in': typeof UnauthSignInRoute
  '/_unauth/sign-up': typeof UnauthSignUpRoute
  '/_auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/sign-in' | '/sign-up' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/sign-in' | '/sign-up' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_unauth'
    | '/_unauth/sign-in'
    | '/_unauth/sign-up'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  UnauthRouteRoute: typeof UnauthRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauth': {
      id: '/_unauth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_unauth/sign-up': {
      id: '/_unauth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof UnauthSignUpRouteImport
      parentRoute: typeof UnauthRouteRoute
    }
    '/_unauth/sign-in': {
      id: '/_unauth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof UnauthSignInRouteImport
      parentRoute: typeof UnauthRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface UnauthRouteRouteChildren {
  UnauthSignInRoute: typeof UnauthSignInRoute
  UnauthSignUpRoute: typeof UnauthSignUpRoute
}

const UnauthRouteRouteChildren: UnauthRouteRouteChildren = {
  UnauthSignInRoute: UnauthSignInRoute,
  UnauthSignUpRoute: UnauthSignUpRoute,
}

const UnauthRouteRouteWithChildren = UnauthRouteRoute._addFileChildren(
  UnauthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  UnauthRouteRoute: UnauthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
